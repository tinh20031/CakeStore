// <auto-generated />
using System;
using CakeStoreAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CakeStoreAPI.Migrations
{
    [DbContext(typeof(CakeStoreDbContext))]
    [Migration("20250926132014_verifyemail")]
    partial class verifyemail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CakeStore.Data.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CakeStore.Data.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8170), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Các loại bánh kem sinh nhật, tiệc cưới",
                            Name = "Bánh Kem",
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8173), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            CategoryId = 2,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8183), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh ngọt, cupcake, tiramisu",
                            Name = "Bánh Ngọt",
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8184), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            CategoryId = 3,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8185), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh mì tươi và sandwich",
                            Name = "Bánh Mì",
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8185), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("CakeStoreAPI.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailsId"));

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("PickupDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Available = true,
                            CategoryId = 1,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8472), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh kem phủ socola hảo hạng",
                            ImageUrl = "banh-kem-socola.jpg",
                            Name = "Bánh Kem Socola",
                            Price = 250000m,
                            StockQuantity = 10,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8473), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ProductId = 2,
                            Available = true,
                            CategoryId = 1,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8480), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh kem trang trí dâu tây tươi",
                            ImageUrl = "banh-kem-dau.jpg",
                            Name = "Bánh Kem Dâu Tây",
                            Price = 280000m,
                            StockQuantity = 8,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8480), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ProductId = 3,
                            Available = true,
                            CategoryId = 2,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8482), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh tiramisu hương vị Ý",
                            ImageUrl = "tiramisu.jpg",
                            Name = "Bánh Tiramisu",
                            Price = 120000m,
                            StockQuantity = 15,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8482), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ProductId = 4,
                            Available = true,
                            CategoryId = 2,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8483), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Cupcake nhỏ gọn hương vani",
                            ImageUrl = "cupcake-vani.jpg",
                            Name = "Cupcake Vani",
                            Price = 35000m,
                            StockQuantity = 30,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8484), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ProductId = 5,
                            Available = true,
                            CategoryId = 3,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8485), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh mì baguette giòn thơm",
                            ImageUrl = "baguette.jpg",
                            Name = "Bánh Mì Baguette",
                            Price = 20000m,
                            StockQuantity = 50,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8485), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ProductId = 6,
                            Available = true,
                            CategoryId = 3,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8487), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Bánh mì sandwich mềm xốp",
                            ImageUrl = "sandwich.jpg",
                            Name = "Bánh Mì Sandwich",
                            Price = 25000m,
                            StockQuantity = 40,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8487), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("CakeStoreAPI.Models.PromotionHistory", b =>
                {
                    b.Property<int>("PromotionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromotionHistoryId"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Change_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Change_By")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PromotionHistoryId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionHistories");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.PromotionProducts", b =>
                {
                    b.Property<int>("PromotionProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromotionProductsId"));

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PromotionProductsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionProducts");

                    b.HasData(
                        new
                        {
                            PromotionProductsId = 1,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8562), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 1,
                            PromotionId = 1,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8562), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            PromotionProductsId = 2,
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8565), new TimeSpan(0, 0, 0, 0, 0)),
                            ProductId = 2,
                            PromotionId = 1,
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8565), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Promotions", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            PromotionId = 1,
                            Code = "HE10",
                            Created_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8537), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Giảm 10% cho bánh kem",
                            DiscountPercentage = 10m,
                            EndDate = new DateOnly(2025, 10, 26),
                            Name = "Khuyến Mãi Hè",
                            StartDate = new DateOnly(2025, 9, 26),
                            Updated_At = new DateTimeOffset(new DateTime(2025, 9, 26, 13, 20, 14, 101, DateTimeKind.Unspecified).AddTicks(8538), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("First_Name")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Last_Name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Updated_At")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CakeStore.Data.Entities.Cart", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("CakeStore.Data.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CakeStore.Data.Entities.CartItem", b =>
                {
                    b.HasOne("CakeStore.Data.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeStoreAPI.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.OrderDetails", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeStoreAPI.Models.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Orders", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Payments", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.Orders", "Order")
                        .WithOne("Payments")
                        .HasForeignKey("CakeStoreAPI.Models.Payments", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Products", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.PromotionHistory", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.Promotions", "Promotion")
                        .WithMany("PromotionHistories")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.PromotionProducts", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.Products", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeStoreAPI.Models.Promotions", "Promotion")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Reviews", b =>
                {
                    b.HasOne("CakeStoreAPI.Models.Products", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CakeStoreAPI.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CakeStore.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Orders", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Products", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PromotionProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.Promotions", b =>
                {
                    b.Navigation("PromotionHistories");

                    b.Navigation("PromotionProducts");
                });

            modelBuilder.Entity("CakeStoreAPI.Models.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
